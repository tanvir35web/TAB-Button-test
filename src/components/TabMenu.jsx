import React, { useState } from 'react'
import './TabMenuStyle.css'

export default function TabMenu() {

    const [toggle, setToggle] = useState(1);

    function updateToggle(id) {
        setToggle(id)
    }

  return (
    <>
        <div className="tabContainer">
            <ul>
                <li onClick={() => updateToggle(1)}>কম্পাইলার এবং ইন্টারপ্রেটার </li>
                <li onClick={() => updateToggle(2)}>জাস্ট ইন টাইম</li>
                <li onClick={() => updateToggle(3)}>জাভাস্ক্রিপ্ট ইঞ্জিন</li>
                <li onClick={() => updateToggle(4)}>এক্সিকিউশন কন্টেক্সট</li>
            </ul>
        </div>

        <div className="contentsArea">

            <div className= {toggle === 1 ? "content active" : "content" }>
                <h1>কম্পাইলার এবং ইন্টারপ্রেটার</h1><br />
                <h4>Compiler and Interpreter</h4> <br /><br />
                <p>সহজ ভাষায় বললে, কম্পাইলার এবং ইন্টারপ্রেটার উভয়ই এমন এক ধরণের Translator প্রোগ্রাম যা আমাদের লেখা High Level ল্যাঙ্গুয়েজকে কম্পিউটার দ্বারা বোধগম্য Low Level ল্যাঙ্গুয়েজ অথবা Binary কোড এ রূপান্তর করে। কিন্তু কম্পাইলার এবং ইন্টারপ্রেটার দুটি ভিন্ন ভাবে কাজ করে। তাই তাদেরকে আলাদা নাম দেয়া হয়েছে। <br /> <br />
                 কম্পাইলার:
                একটি কম্পাইলার একটি হাই লেভেল ল্যাঙ্গয়েজকে লো (Low) লেভেল ল্যাঙ্গুয়েজে যেমন Assemble Language, Object Code অথবা Binary Code (0 and 1) এ একবারে translate করে, তারপরে টার্গেট প্রোগ্রামটা  Runnable হয়। সুতরাং প্রোগ্রাম রান করার আগেই প্রোগ্রাম কে compile করে রাখা হয়। যেমন C, C++, C#, Java, etc. কম্পাইলার এর আবার অনেক ধরণ রয়েছে। <br /> <br />
                ইন্টারপ্রেটার:
                একটি ইন্টারপ্রেটার হাই লেভেল ল্যাঙ্গুয়েজকে লাইন বাই লাইন Translate করে যা শুধু টার্গেট প্রোগ্রাম রান করার সময় সম্পন্ন হয়। যেমন PHP, Python, JavaScript(basically), Perl, Ruby, etc. ইন্টারপ্রেটার এরও অনেক ধরণ রয়েছে।</p>
            </div>

            <div className = {toggle === 2 ? "content active" : "content" }>
                <h1>জাস্ট ইন টাইম(JIT) কম্পাইলার</h1><br />
                <h4>JIT in Compiler</h4><br /><br />
                <p>আমরা প্রোগ্রামাররা যে যার প্রয়োজন অনুযায়ী বিভিন্ন ধরনের প্রোগ্রামিং ভাষা ব্যবহার করে থাকি। যে ভাষাই ব্যবহার করিনা কেন, সেটি কিন্তু কম্পিউটারের কাছে বোধগম্য নয়। অর্থাৎ প্রোগ্রামারদের এবং কম্পিউটারের কথা বলার ভাষা সম্পূর্ণ আলাদা এবং এরা কেউ কারো ভাষা বোঝেনা! বাস্তব জীবনে এই সমস্যার সমাধান আমরা কিভাবে করি? খুবই সহজ, আমরা একজন দোভাষীকে ডেকে নিয়ে আসি যে একজনের কথা আরেকজন কে অনুবাদ করে দেয়। প্রোগ্রামিং এর জগতেও ব্যাপারটা ঠিক এভাবেই কাজ করে। প্রোগ্রামিং ল্যংগুয়েজগুলোকে মেশিন ল্যাংগুয়েজে রুপান্তর করার জন্য আমাদের প্রধানত দুই ধরনের দোভাষী প্রোগ্রাম আছে। একটি হলো কম্পাইলার এবং অপরটি ইন্টারপ্রেটার। দুইটির কাজ কিন্তু একই, হাই লেভেল ল্যাংগুয়েজকে মেশিন কোডে রুপান্তর করা। তাহলে এই দুটির পার্থক্য কি? জাস্ট ইন টাইম কম্পাইলেশন বুঝতে হলে এদের পার্থক্য এবং সুবিধা অসুবিধাগুলো জানা আমাদের জন্য খুব দরকারি।</p>
            </div>


            <div className = {toggle === 3 ? "content active" : "content" }>
                <h1>জাভাস্ক্রিপ্ট ইঞ্জিন</h1><br />
                <h4>JavaScript Engin</h4><br /><br />
                <p>জাভাস্ক্রিপ্ট ল্যাংগুয়েজটি আসলে কম্পিউটারের কাছে বোধগম্য নয়। এই ল্যাংগুয়েজ দিয়ে কাজ করার জন্য আমাদের দরকার এমন একটি প্রোগ্রাম যেটা জাভাস্ক্রিপ্টকে কম্পিউটারের জন্য বোধগম্য ভাষায় রূপান্তর করতে পারে। জাভাস্ক্রিপ্ট ইঞ্জিন বলতে আমরা আসলে এই প্রোগ্রামটিকেই বোঝাচ্ছি। গুগল ক্রোম বা মজিলা ফায়ারফক্স এর মতো বিভিন্ন ধরনের ব্রাউজারগুলো তাদের পছন্দ মতো নিজস্ব জাভাস্ক্রিপ্ট ইঞ্জিন ব্যবহার করে থাকে। কয়েকটি জনপ্রিয় ব্রাউজারের জাভাস্ক্রিপ্ট ইঞ্জিনগুলোর নাম নিচে দেয়া হলোঃ
                গুগল ক্রোম – V8 ইঞ্জিন
                মজিলা ফায়ারফক্স – স্পাইডার মাঙ্কি
                সাফারি – জাভাস্ক্রিপ্ট কোর
                নোড জেএস – V8 ইঞ্জিন
                মাইক্রোসফট এজ – চাকরা 
                এই ইঞ্জিনগুলোর মধ্যে V8 কে বর্তমানে সবচেয়ে জনপ্রিয় এবং দক্ষ হিসেবে ধরা হয়। আমাদের এই লেখায় সবগুলো ইঞ্জিন নিয়ে আলোচনা করা সম্ভব নয়। তাই আমরা এখানে চেষ্টা করবো শুধুমাত্র V8 ইঞ্জিন নিয়ে কথা বলতে। এই ইঞ্জিনটার কর্মপদ্ধতি বুঝতে পারলে আশা করছি বাকি ইঞ্জিনগুলো বোঝা খুব বেশি  কঠিন হবে না আপনাদের জন্য। V8 ইঞ্জিন কিভাবে কাজ করে এটা বোঝার জন্য আগে কিছু বিষয়ে ধারনা নেয়া দরকার। ১) পার্সার (Parser):  পার্সারের কাজ হলো আমাদের জাভাস্ক্রিপ্ট কোডকে টোকেনে ভাগ করা। এখন প্রশ্ন আসতে পারে যে এই টোকেনে ভাগ করার কি প্রয়োজন? টোকেনাইজেশন এর কাজ শেষে এই টোকেনগুলো থেকেই এবস্ট্রাক্ট সিনট্যাক্স ট্রি (Abstract Syntax Tree) তৈরি হবে।   ২) এবস্ট্রাক্ট সিনট্যাক্স ট্রি (Abstract Syntax Tree): AST বা Abstract Syntax Tree হলো আমাদের জাভাস্ক্রিপ্ট প্রোগ্রামের একটি ট্রি-এর মত কাঠামো যেটা টোকেন লিস্ট থেকে তৈরি হয়। একটি ইন্টারপ্রেটারকে AST দিয়ে দিলে পরবর্তীতে সেটি থেকে বাইটকোড পাওয়া যায়।  ৩) ইন্টারপ্রেটারঃ জাভাস্ক্রিপ্ট হলো একটি ইন্টারপ্রেটার ল্যাঙ্গুয়েজ। AST (Abstract Syntax Tree) কে বাইট কোডে রূপান্তর করাই মূলত ইন্টারপ্রেটারের কাজ। ইন্টারপ্রেটার থেকে পাওয়া বাইট কোডকে আরো অপটিমাইজ করার জন্য কম্পাইলার ব্যবহার করা হয়।  ৪) প্রোফাইলারঃ আমাদের কোডে সবসময় এমন কিছু অংশ থাকে যেটা বিভিন্ন যায়গায় বারবার ব্যবহৃত হয়। এগুলোকে ‘হট কোড’ (Hot Code) বলা হয়। প্রোফাইলারের কাজ হলো এই হট কোড কে খুঁজে বের করা।এই কোডগুলো যেহেতু অনেক বেশি সংখ্যক বার এক্সিকিউট হচ্ছে, কোডের এই অংশগুলো কতটা অপটিমাইজড সেটার উপর সম্পূর্ন প্রোগ্রামটির পারফরম্যান্স নির্ভর করছে। ৫) কম্পাইলারঃ আমরা আগেই বলেছি যে জাভাস্ক্রিপ্ট একটি ইন্টারপ্রেটার ল্যাঙ্গুয়েজ। কিন্তু তাহলে এখানে কম্পাইলার এর কথা আসছে কেন? জাভাস্ক্রিপ্ট ইঞ্জিনে কম্পাইলারের ভূমিকা আসলে অপটিমাইজেশনে। ইন্টারপ্রেটার হতে পাওয়া বাইটকোড ব্যবহার করেও প্রোগ্রাম ব্রাউজারে রান করানো যায় কিন্তু আরো ভালো হতো যদি আমরা আমাদের কোডের ‘হট’ পার্টগুলোকে অপটিমাইজড কোডে রূপান্তর করে ফেলতে পারতাম। এই কাজটি করার জন্যই কম্পাইলারের প্রয়োজন। V8 ইঞ্জিনের ক্ষেত্রে এই কম্পাইলারটির নাম ‘টার্বোফ্যান’।  </p>
                </div>

            <div className = {toggle === 4 ? "content active" : "content" }>
                <h1>এক্সিকিউশন কন্টেক্সট </h1><br />
                <h4>Execution Context</h4><br /><br />
                <p>এক্সিকিউশন কন্টেক্সট একটি এনভাইরনমেন্ট যেখানে জাভাস্ক্রিপ্ট কোড এক্সিকিউট করা হয়। যখনই জাভাস্ক্রিপ্টে কোন কোড রান করা হয়, এটি একটি এক্সিকিউশন কন্টেক্সটের মধ্যে রান করা হয়। জাভাস্ক্রিপ্টে তিন ধরনের এক্সিকিউশন কন্টেক্সট আছেঃ-

                ১) গ্লোবাল এক্সিকিউশন কন্টেক্সট:
                এটি ডিফল্ট এক্সিকিউশন কন্টেক্সট। যে কোডটি কোন ফাংশনের ভিতরে নেই তা গ্লোবাল এক্সিকিউশন কন্টেক্সটে আছে। এটি দুটি জিনিস সম্পন্ন করেঃ

                এটি একটি গ্লোবাল অবজেক্ট তৈরি করে যা একটি window অবজেক্ট (ব্রাউজারের ক্ষেত্রে) এবং global অবজেক্ট (নোডের ক্ষেত্রে)
                this এর ভ্যালু হিসাবে গ্লোবাল অবজেক্টকে সেট করে। একটি প্রোগ্রামে শুধুমাত্র একটি গ্লোবাল এক্সিকিউশন কন্টেক্সট থাকতে পারে।
                ২) ফাংশন এক্সিকিউশন কন্টেক্সটঃ
                যখনই কোন ফাংশন কল করা হয়, সেই ফাংশনের জন্য জেএস ইঞ্জিন একটি নতুন এক্সিকিউশন কন্টেক্সট তৈরি করে। প্রতিটি ফাংশনের নিজস্ব এক্সিকিউশন কন্টেক্সট আছে। একাধিক সংখ্যক ফাংশন এক্সিকিউশন কন্টেক্সট হতে পারে। ফাংশন এক্সিকিউশন কন্টেক্সটের গ্লোবাল এক্সিকিউশন কন্টেক্সটের সকল কোড অ্যাক্সেস আছে যদিও গ্লোবাল কন্টেক্সটের ফাংশন এক্সিকিউশন কন্টেক্সটের কোডের অ্যাক্সেস নেই। গ্লোবাল এক্সিকিউশন কন্টেক্সটের কোড এক্সিকিউট করার সময় যদি জেএস ইঞ্জিন কোন ফাংশন কল পায়, এটি সেই ফাংশনের জন্য একটি নতুন ফাংশন এক্সিকিউশন কন্টেক্সট তৈরি করে। ব্রাউজার কন্টেক্সটে, যদি কোড strict মোডে এক্সিকিউট করা হয়, তাহলে this এর ভ্যালু undefined অন্যথায় window অবজেক্ট হবে ফাংশন এক্সিকিউশন কন্টেক্সট।

                ৩) ইভাল এক্সিকিউশন কন্টেক্সটঃ
                ইভাল ফাংশনের ভিতরে এক্সিকিউশন কন্টেক্সট।</p>
            </div>

        </div>
    </>
  )
}
